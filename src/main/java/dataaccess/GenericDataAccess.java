package dataaccess;

import java.beans.IntrospectionException;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Generic class used to access data from a database for an object of type T.
 * It is assumed that the mapping to the object is 1-1, and the table has the same name as the object class.
 * Every object is supposed to have an int id field, which is auto generated by the database.
 */
public abstract class GenericDataAccess<T> {
    protected static final Logger LOGGER = Logger.getLogger(GenericDataAccess.class.getName());

    protected final Class<T> type;

    @SuppressWarnings("unchecked")
    public GenericDataAccess() {
        this.type = (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];
    }

    /**
     * Creates a SELECT statement which has a field op ? (ex: id < ?)
     * It is used for filtering.
     * it should be used after this with a statement.setObject method
     *
     * @param field    the field of the object
     * @param operator the operation applied to the field
     * @return the select statement/
     */
    private String createSelectQuery(String field, String operator) {
        StringBuilder sb = new StringBuilder();
        sb.append("SELECT ");
        sb.append(" * ");
        sb.append(" FROM ");
        sb.append(type.getSimpleName());
        sb.append(" WHERE " + field + " " + operator + "?");
        return sb.toString();
    }

    /**
     * @return All objects in the database.
     */
    public List<T> findAll() {
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        String query = "SELECT * FROM " + type.getSimpleName();

        try {
            connection = ConnectionFactory.getConnection();
            statement = connection.prepareStatement(query);
            resultSet = statement.executeQuery();

            return createObjects(resultSet);
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, type.getName() + "DAO:findAll " + e.getMessage());
        } finally {
            ConnectionFactory.close(resultSet);
            ConnectionFactory.close(statement);
            ConnectionFactory.close(connection);
        }
        return null;
    }

    /**
     * Returns all the object which respect the filtering criteria.
     *
     * @param field      the fild which is filtered.
     * @param operator   the operator used for filtering (ex: <, =, >)
     * @param fieldValue the value used for filtering
     * @return the list of objects respecting the filter.
     */
    public List<T> findByField(String field, String operator, String fieldValue) {
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        String query = createSelectQuery(field, operator);

        try {
            connection = ConnectionFactory.getConnection();
            statement = connection.prepareStatement(query);
            statement.setObject(1, fieldValue);
            resultSet = statement.executeQuery();

            return createObjects(resultSet);
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, type.getName() + "DAO:findById " + e.getMessage());
        } finally {
            ConnectionFactory.close(resultSet);
            ConnectionFactory.close(statement);
            ConnectionFactory.close(connection);
        }
        return null;
    }

    public T findById(int id) {
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        String query = createSelectQuery("id", "=");
        try {
            connection = ConnectionFactory.getConnection();
            statement = connection.prepareStatement(query);
            statement.setInt(1, id);
            resultSet = statement.executeQuery();

            return createObjects(resultSet).get(0);
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, type.getName() + "DAO:findById " + e.getMessage());
        } finally {
            ConnectionFactory.close(resultSet);
            ConnectionFactory.close(statement);
            ConnectionFactory.close(connection);
        }
        return null;
    }

    /**
     * Returns a list of objects from a ResultSet,
     *
     * @param resultSet the resultSet used for generating objects.
     * @return the list of objects of type T.
     */
    private List<T> createObjects(ResultSet resultSet) {
        List<T> list = new ArrayList<T>();

        try {
            while (resultSet.next()) {
                T instance = type.newInstance();
                for (Field field : type.getDeclaredFields()) {
                    Object value = resultSet.getObject(field.getName());
                    PropertyDescriptor propertyDescriptor = new PropertyDescriptor(field.getName(), type);
                    Method method = propertyDescriptor.getWriteMethod();
                    method.invoke(instance, value);
                }
                list.add(instance);
            }
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (SecurityException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (IntrospectionException e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * Insert a new object of type t in the database
     *
     * @param t the object to insert
     * @return the inserted object
     */
    public T insert(T t) {
        StringBuilder sb = new StringBuilder();
        sb.append("INSERT INTO ");
        sb.append(type.getSimpleName());
        sb.append("(");

        for (Field field : type.getDeclaredFields()) {
            if (field.getName().equals("id")) continue;
            sb.append(field.getName());
            sb.append(",");
        }

        sb.deleteCharAt(sb.length() - 1);

        sb.append(") VALUES(");

        for (Field field : t.getClass().getDeclaredFields()) {
            if (field.getName().equals("id")) continue;
            sb.append("'");
            field.setAccessible(true);
            try {
                sb.append(field.get(t).toString());
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }

            sb.append("',");
        }

        sb.deleteCharAt(sb.length() - 1);
        sb.append(")");

        makeUpdate(sb.toString());

        return t;
    }

    /**
     * Updates the object t properties in the databases
     *
     * @param t the object with updated fields
     * @return the object
     */
    public T update(T t) {
        StringBuilder sb = new StringBuilder();
        sb.append("UPDATE ");
        sb.append(type.getSimpleName());
        sb.append(" SET ");

        String updateId = "";

        for (Field field : t.getClass().getDeclaredFields()) {
            sb.append("`");
            sb.append(field.getName());
            sb.append("`='");

            field.setAccessible(true);
            try {
                sb.append(field.get(t).toString());
                if (field.getName().equals("id")) updateId = field.get(t).toString();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }

            sb.append("',");
        }

        sb.deleteCharAt(sb.length() - 1);

        sb.append("WHERE `id`='");
        sb.append(updateId);
        sb.append("'");

        makeUpdate(sb.toString());
        return t;
    }

    /**
     * @param query the query to be executed
     * @return true if succes, false if error
     */
    protected boolean makeUpdate(String query) {
        Connection connection = null;
        PreparedStatement statement = null;

        try {
            connection = ConnectionFactory.getConnection();
            statement = connection.prepareStatement(query);
            statement.executeUpdate();

            return true;
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, type.getName() + "DAO:findAll " + e.getMessage());
        } finally {
            ConnectionFactory.close(statement);
            ConnectionFactory.close(connection);
        }

        return false;
    }

    public boolean deleteById(int id) {

        String query = "DELETE FROM " + type.getSimpleName() + " WHERE id=" + id;
        return makeUpdate(query);
    }

}
